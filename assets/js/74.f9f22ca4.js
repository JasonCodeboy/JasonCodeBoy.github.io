(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{394:function(v,t,e){"use strict";e.r(t);var a=e(33),s=Object(a.a)({},(function(){var v=this,t=v.$createElement,e=v._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"v-text，v-html，v-show，v-if，v-for-和-key-值原理，v-on-原理，v-model，v-pre，v-cloak，v-once"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-text，v-html，v-show，v-if，v-for-和-key-值原理，v-on-原理，v-model，v-pre，v-cloak，v-once"}},[v._v("#")]),v._v(" v-text，v-html，v-show，v-if，v-for 和 key 值原理，v-on 原理，v-model，v-pre，v-cloak，v-once")]),v._v(" "),e("p",[v._v("在 Vue 中提供了一些对于页面 + 数据的更为方便的操作或输出，这些操作就叫做指令。")]),v._v(" "),e("p",[v._v("指令中封装了一些 DOM 行为，结合属性作为一个暗号，暗号有对应的值，根据不同的值，框架会进行相关 DOM 操作的绑定。")]),v._v(" "),e("p",[v._v('在 Vue 中，所有的指令都是以 v-xxx 开头的。像之前的 :id = "..." 和 @click = "..."，这个只是一种缩略的写法。')]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-text：其实就是给元素的-innertext-赋值。（必须是双标签）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-text：其实就是给元素的-innertext-赋值。（必须是双标签）"}},[v._v("#")]),v._v(" v-text：其实就是给元素的 innerText 赋值。（必须是双标签）")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-1.png",alt:"在这里插入图片描述"}}),v._v(" "),e("img",{attrs:{src:"/img/vue-7-2.png",alt:"在这里插入图片描述"}}),v._v("\nv-text 和数据绑定其实就是一个意思。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-html：其实就是给元素的-innerhtml-赋值。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-html：其实就是给元素的-innerhtml-赋值。"}},[v._v("#")]),v._v(" v-html：其实就是给元素的 innerHTML 赋值。")]),v._v(" "),e("p",[v._v("这个我们在之前已经有说过了。")]),v._v(" "),e("p",[v._v("如果我们直接用数据绑定的方法，它显示的是整个字符串。而不是把我们的 html 标签，当作标签去显示。")]),v._v(" "),e("p",[v._v("如果我们要作为标签的话，就可以用 v-html 来做。")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-3.png",alt:"在这里插入图片描述"}}),v._v("\nv-html 的作用，其实就是我们给一个节点里面，把我们变量里面的内容，作为 html 插入进去，而不是作为内容插入进去。")]),v._v(" "),e("p",[v._v("相当于就是 DOM 里面的 innerHTML 和 innerText 的区别。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-show：是否显示或隐藏这个节点元素。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-show：是否显示或隐藏这个节点元素。"}},[v._v("#")]),v._v(" v-show：是否显示或隐藏这个节点元素。")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-4.png",alt:"在这里插入图片描述"}}),v._v("\nv-show 的原理其实就是，在这个节点上加上 display: none。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-if：判断是否插入这个元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-if：判断是否插入这个元素"}},[v._v("#")]),v._v(" v-if：判断是否插入这个元素")]),v._v(" "),e("p",[v._v("v-if 和 v-show 的区别就是，v-if 是直接把这个节点不放在 DOM 流里面，也就是说这个节点是不存在的。\n"),e("img",{attrs:{src:"/img/vue-7-5.png",alt:"在这里插入图片描述"}}),v._v("\nv-if 如果值为 false，会留下一个 "),v._v(" 作为标记，万一将来 v-if 的值是 true 了，就在这里插入元素。")]),v._v(" "),e("p",[v._v("所以，如果只是想控制一个节点的显示和隐藏，就用 v-show。")]),v._v(" "),e("p",[v._v("如果用了 v-if，它会动态的去增删节点，这个性能会比我们改变样式肯定要差很多。")]),v._v(" "),e("p",[v._v("如果我们动态的增删节点，就会引起整个 DOM 的重绘，以及它的重新排版。这些都是非常耗时的操作。")]),v._v(" "),e("p",[v._v("现在只有一个节点，体现不出来。但是如果节点非常多的话，就会导致你应用的性能变的很差。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"那么和-v-if-搭配的，还有-v-else-if，v-else。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#那么和-v-if-搭配的，还有-v-else-if，v-else。"}},[v._v("#")]),v._v(" 那么和 v-if 搭配的，还有 v-else-if，v-else。")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-6.png",alt:"在这里插入图片描述"}}),v._v("\n这个就像我们在 JS 里去写 if else 语句一样的。")]),v._v(" "),e("p",[v._v("如果要用 v-else，那么它的上一个兄弟节点，就必须要是 v-if。如果没有，就会报错。")]),v._v(" "),e("p",[v._v("v-else-if 也是和 JS 中的 else if 用法一样的。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-for"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-for"}},[v._v("#")]),v._v(" v-for")]),v._v(" "),e("p",[v._v("如果遍历的是数组：\n"),e("img",{attrs:{src:"/img/vue-7-7.png",alt:"在这里插入图片描述"}}),v._v("\n如果遍历的是对象：\n"),e("img",{attrs:{src:"/img/vue-7-8.png",alt:"在这里插入图片描述"}}),v._v("\n遍历对象里面的 index，其实就跟我们去遍历数组一样，它也是从 0，1，2 开始的。")]),v._v(" "),e("p",[v._v("它其实在 JS 里面的逻辑就是通过 Object.keys() 去把这个对象的 key 给读出来，然后得到的这个顺序，就是 index 的顺序。")]),v._v(" "),e("p",[v._v("那么我们可以用 index 来做奇偶数的判断，并给予不同的样式：")]),v._v(" "),e("p",[v._v(":class = \" index % 2 == 0 ? 'red' : 'green' \"")]),v._v(" "),e("p",[v._v("那么，在使用 v-for 的时候，我们还有一点要注意的是，我们需要给它加一个 key。我们循环出来的列表，为什么要给它加 key 呢？")]),v._v(" "),e("p",[v._v("这个 key，它是希望你循环的这列数据里面，唯一指定的一个值。我们一般循环的可能是个 table 的列表。")]),v._v(" "),e("p",[v._v("这个 table 列表可能对应的是你后台的一些数据，这些数据肯定会有一个 id，你要拿这个唯一的 id 去做这个 key。为什么呢？")]),v._v(" "),e("p",[v._v("因为你这个数据是会经常去变动的，如果你每次变化，Vue 都要去重新渲染这个列表，在把它放到 DOM 里面去，它的性能开销就会比较大。")]),v._v(" "),e("p",[v._v("如果我们给它指定了一个 key 之后，如果再下一次循环的时候，从缓存里面拿到的是同样的一个 key，它就把这一行 DOM 节点直接复用了。")]),v._v(" "),e("p",[v._v("就是不需要再去生成一个新的 DOM 节点，直接用之前缓存过的 DOM 节点，这样的话，性能开销就会比较小。")]),v._v(" "),e("p",[v._v('注意：不要用 index 去指定 key 值 --\x3e :key="index"')]),v._v(" "),e("p",[v._v("因为数组顺序它的变化，和数组里面实际的内容是没有任何关系的。")]),v._v(" "),e("p",[v._v("如果用 index 作为 key，其实是非常不好的选择，因为它会导致一个错误的缓存。比如有时会碰到一些莫名其妙的 BUG，而且你也不好找出来。")]),v._v(" "),e("p",[v._v("key 值，我们一般都是用 v-bind 绑定的去写，如果没用 v-bind，那么它就是一个字符串。就会导致每一个循环出来的 item 的 key 都是相同的一个字符串。")]),v._v(" "),e("p",[v._v("它就不知道怎么去缓存了，因为你的 key 都是相同的。所以必须要去用数据绑定的方式去写，这样它就是一个动态的值。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-on"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-on"}},[v._v("#")]),v._v(" v-on")]),v._v(" "),e("p",[v._v("v-on 其实就对应的，就是我们之前在 Vue 实例上面讲过的事件系统。你在 DOM 节点上面加的 @click，其实就是 v-on:click，它是一个事件绑定。")]),v._v(" "),e("p",[v._v("这个事件绑定其实就是在 Vue 对象的实例上面去绑定一个事件。")]),v._v(" "),e("p",[v._v("这个指令只不过是我们在写 template 的时候，它方便我们去做 vm.$on 这种方式。")]),v._v(" "),e("p",[v._v("因为我们如果要自己去拿到 vm 对象在给它 $on，那么我们的操作会变的非常不方便。")]),v._v(" "),e("p",[v._v("所以 v-on 你可以理解为：它就是拿到了组件的 vm 对象后，然后通过 $on 去加一个事件。")]),v._v(" "),e("p",[v._v("但如果 @click 是加到 div 节点上呢？那么 div 它不是一个 Vue 的组件，它也没有一个 vm 的实例。")]),v._v(" "),e("p",[v._v("但是 v-on 会主动的帮我们去判断，如果是一个 DOM 节点，那么它会使用 document.addEventListener 这种方式去添加事件。")]),v._v(" "),e("p",[v._v("如果它是一个组件，就使用 $on 去添加事件。这就是 v-on 这个指令帮我们去做的事情。")]),v._v(" "),e("p",[v._v("v-on 和 v-bind 的例子，之前都已经讲解过了，这里就不继续举例说明了。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-model"}},[v._v("#")]),v._v(" v-model")]),v._v(" "),e("p",[v._v("v-model 在原生的组件上面，我们一般都是用在 input 上面。\n"),e("img",{attrs:{src:"/img/vue-7-9.png",alt:"在这里插入图片描述"}}),v._v("\n上图就是绑定 text 和 checkbox 最简单的方法。")]),v._v(" "),e("p",[v._v("那么如果我们有一列数组数据，我们希望的是有三个 checkbox，帮我们去选择数组里面有哪几个是选中的，那这种情况，我们要怎么去绑定呢？\n"),e("img",{attrs:{src:"/img/vue-7-10.png",alt:"在这里插入图片描述"}}),v._v("\n刚开始三个都是选中的，那么如果数组里面只有 [ 2, 3 ] 呢？\n"),e("img",{attrs:{src:"/img/vue-7-11.png",alt:"在这里插入图片描述"}}),v._v("\n这就是我们要绑定一列数据，并且我们要显示在这一列数据里面的值是 value 值的时候，我们也可以通过 v-model 帮我们去做这个事情。这个是多选框。")]),v._v(" "),e("p",[v._v("那么单选框呢？其实也差不了多少。")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-12.png",alt:"在这里插入图片描述"}}),v._v("\nv-model 其实还有一些其他的功能，修饰符。")]),v._v(" "),e("p",[v._v("什么是修饰符呢？就是代表我们对于 input 框要输入的一些内容，做一些处理。")]),v._v(" "),e("p",[v._v('比如 v-model= "变量"，我们输入之后，变量的类型，其实是字符串。')]),v._v(" "),e("p",[v._v('v-model.number = "变量"。当我们输入后，它就会自动的帮我们去转换成一个数字。即使我们输入不对的内容，它也会帮我们转换成一个数字。')]),v._v(" "),e("p",[v._v("其他的就不一一举例了。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-pre"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-pre"}},[v._v("#")]),v._v(" v-pre")]),v._v(" "),e("p",[e("img",{attrs:{src:"/img/vue-7-13.png",alt:"在这里插入图片描述"}}),v._v("\n我们可以看到，v-pre 的功能就是：里面的表达式，它都不会去解析。它得到的结果，就是我们在里面写什么，它就显示出什么东西。")]),v._v(" "),e("hr"),v._v(" "),e("h3",{attrs:{id:"v-cloak"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-cloak"}},[v._v("#")]),v._v(" v-cloak")]),v._v(" "),e("p",[v._v("这个指令在使用 webpack 开发的项目上都是用不到的。它用到的唯一场景就是：")]),v._v(" "),e("p",[v._v("我们直接在页面上引入了 vue.js，然后在页面上去写 Vue 的代码，模版是写在 body 的 html 里面的。")]),v._v(" "),e("p",[v._v("template 里面有很多像")]),v._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br"),e("span",{staticClass:"line-number"},[v._v("4")]),e("br")])]),e("p",[v._v("这些东西，在 html 加载的时候，浏览器是不认识的，会直接把这些内容显示出来。")]),v._v(" "),e("p",[v._v("那么这个体验给用户就会很差。")]),v._v(" "),e("p",[v._v("那么 v-cloak 的作用，其实就是在 Vue 代码还没有加载完成之前， v-cloak 可以给它加一个样式 display: none。把它整个隐藏掉。")]),v._v(" "),e("p",[v._v("然后在代码加载完成之后，Vue 做的第一件事情就是把有 v-cloak 的标签，把它去掉。")]),v._v(" "),e("p",[v._v("这个指令现在基本用不到了，所以也不详细讲了。")]),v._v(" "),e("h3",{attrs:{id:"v-once"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#v-once"}},[v._v("#")]),v._v(" v-once")]),v._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("v-once")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("{{ text }}"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br")])]),e("p",[v._v("如果一直改变 text 的值，会发现，只变化了一次。")]),v._v(" "),e("p",[v._v("v-once 就是数据绑定的内容，只执行一次。第二次有新的数据变化的时候，它里面的模版不会再去重新编译了。")]),v._v(" "),e("p",[v._v("用的场景主要写一些静态的内容。它的作用就是帮我们节省一点性能开销。")]),v._v(" "),e("p",[v._v("它代表这里面的东西 Vue 就不会再去检测了。它就不会去和虚拟 DOM 做一个对比，看它要不要重新去更新内容。")])])}),[],!1,null,null,null);t.default=s.exports}}]);